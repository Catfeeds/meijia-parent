<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.simi.po.dao.card.CardsMapper">
	<resultMap id="BaseResultMap" type="com.simi.po.model.card.Cards">
		<id column="card_id" property="cardId" jdbcType="NUMERIC" />
		<result column="create_user_id" property="createUserId" jdbcType="NUMERIC" />
		<result column="user_id" property="userId" jdbcType="NUMERIC" />
		<result column="card_type" property="cardType" jdbcType="NUMERIC" />
		<result column="title" property="title" jdbcType="VARCHAR" />
		<result column="service_time" property="serviceTime" jdbcType="NUMERIC" />
		<result column="service_addr" property="serviceAddr" jdbcType="VARCHAR" />
		<result column="service_content" property="serviceContent" jdbcType="VARCHAR" />
		<result column="card_extra" property="cardExtra" jdbcType="VARCHAR" />
		<result column="set_remind" property="setRemind" jdbcType="SMALLINT" />
		<result column="set_now_send" property="setNowSend" jdbcType="NUMERIC" />
		<result column="set_sec_do" property="setSecDo" jdbcType="NUMERIC" />
		<result column="set_sec_remarks" property="setSecRemarks" jdbcType="VARCHAR" />		
		<result column="sec_remarks" property="secRemarks" jdbcType="VARCHAR" />
		<result column="set_friend_view" property="setFriendView" jdbcType="VARCHAR" />
		<result column="status" property="status" jdbcType="NUMERIC" />
		<result column="add_time" property="addTime" jdbcType="NUMERIC" />
		<result column="update_time" property="updateTime" jdbcType="NUMERIC" />
	</resultMap>
	<sql id="Base_Column_List">
		card_id, create_user_id, user_id, card_type, title, service_time, service_addr,
		service_content, card_extra, set_remind, set_now_send, set_sec_do, set_sec_remarks, sec_remarks,
		set_friend_view, status,  add_time, update_time
	</sql>
	<select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long">
		select
		<include refid="Base_Column_List" />
		from cards
		where card_id = #{cardId,jdbcType=NUMERIC}
	</select>
	<select id="selectListByAddtimeTwo" resultMap="BaseResultMap" parameterType="java.lang.Long">
		select
		<include refid="Base_Column_List" />
		from cards
		where set_sec_do = 1 and status = 1 and add_time + 120 &lt; unix_timestamp(now())
		
	</select>
	<select id="selectListByAddtimeThirty" resultMap="BaseResultMap" parameterType="java.lang.Long">
		select
		<include refid="Base_Column_List" />
		from cards
		where set_sec_do = 1 and status = 1 and add_time + 1800 &lt; unix_timestamp(now())
		
	</select>
	
	
	<sql id="selectAll">
		select <include refid="Base_Column_List" />
		from
		(
			select <include refid="Base_Column_List" /> from cards 
			where (user_id = #{userId,jdbcType=NUMERIC} or create_user_id = #{userId,jdbcType=NUMERIC})
			<if test="cardType != null">
				and card_type = #{cardType,jdbcType=NUMERIC}
			</if>
			
			<if test="startTime != null">
				<![CDATA[	and service_time >= ${startTime} ]]>   
			</if>	
				
			<if test="endTime != null">
				<![CDATA[	and service_time <= ${endTime} ]]>   
			</if>
			union
			
			select <include refid="Base_Column_List" /> from cards 
			where card_id in (select card_id from card_attend where user_id = #{userId,jdbcType=NUMERIC})
			
			<if test="cardType != null">
				and card_type = #{cardType,jdbcType=NUMERIC}
			</if>
			
			<if test="startTime != null">
				<![CDATA[	and service_time >= ${startTime} ]]>   
			</if>	
				
			<if test="endTime != null">
				<![CDATA[	and service_time <= ${endTime} ]]>   
			</if>
						
			<if test="userType == 1">
				union
				select <include refid="Base_Column_List" /> from cards 
				where user_id in (select user_id from user_ref_sec where sec_id = #{userId,jdbcType=NUMERIC})
				and set_sec_do = 1
				
				<if test="cardType != null">
					and card_type = #{cardType,jdbcType=NUMERIC}
				</if>
				
				<if test="startTime != null">
					<![CDATA[	and service_time >= ${startTime} ]]>   
				</if>	
					
				<if test="endTime != null">
					<![CDATA[	and service_time <= ${endTime} ]]>   
				</if>			
			
			</if>	
		) as T
		order by add_time desc
	</sql>
	
	<sql id="selectMine" >
		select
		<include refid="Base_Column_List" />
		from cards
		where 1=1
		
		<if test="userId != null">
			and create_user_id = #{userId,jdbcType=NUMERIC}
		</if>	
		
		<if test="cardType != null">
				and card_type = #{cardType,jdbcType=NUMERIC}
		</if>
				
		<if test="startTime != null">
		<![CDATA[	and service_time >= ${startTime} ]]>   
		</if>	
		
		<if test="endTime != null">
		<![CDATA[	and service_time <= ${endTime} ]]>   
		</if>			
		
		order by add_time desc
	</sql>
	
	<sql id="selectAttend">
		select <include refid="Base_Column_List" />
		from
		(

			select <include refid="Base_Column_List" /> from cards 
			where card_id in (select card_id from card_attend where user_id = #{userId,jdbcType=NUMERIC})
			
			<if test="cardType != null">
				and card_type = #{cardType,jdbcType=NUMERIC}
			</if>
			
			<if test="startTime != null">
				<![CDATA[	and service_time >= ${startTime} ]]>   
			</if>	
				
			<if test="endTime != null">
				<![CDATA[	and service_time <= ${endTime} ]]>   
			</if>
			<if test="userType == 1">
			union
			select <include refid="Base_Column_List" /> from cards 
			where user_id in (select user_id from user_ref_sec where sec_id = #{userId,jdbcType=NUMERIC})
			and set_sec_do = 1
				<if test="cardType != null">
					and card_type = #{cardType,jdbcType=NUMERIC}
				</if>
			
				<if test="startTime != null">
					<![CDATA[	and service_time >= ${startTime} ]]>   
				</if>	
					
				<if test="endTime != null">
					<![CDATA[	and service_time <= ${endTime} ]]>   
				</if>
			</if>	
		) as T
		order by add_time desc
	</sql>	
	
	
	<!-- 卡片列表方法 某个用户所有的卡片 -分页 -->
	<select id="selectByListPage" resultMap="BaseResultMap"
		parameterType="com.simi.vo.card.CardSearchVo">
		<include refid="selectAll" />
	</select>	
	
	<!-- 卡片列表方法 某个用户所有的卡片 -->
	<select id="selectBySearchVo" resultMap="BaseResultMap"
		parameterType="com.simi.vo.card.CardSearchVo">
		<include refid="selectAll" />
	</select>	
	
	<!-- 卡片列表方法 某个用户发布的卡片 分页-->
	<select id="selectMineByListPage" resultMap="BaseResultMap"
		parameterType="com.simi.vo.card.CardSearchVo">
		<include refid="selectMine" />
	</select>
	
	<!-- 卡片列表方法 某个用户发布的卡片-->
	<select id="selectMineBySearchVo" resultMap="BaseResultMap"
		parameterType="com.simi.vo.card.CardSearchVo">
		<include refid="selectMine" />
	</select>	
	
	<!-- 卡片列表方法 某个用户参与的卡片 分页-->
	<select id="selectAttendByListPage" resultMap="BaseResultMap"
		parameterType="com.simi.vo.card.CardSearchVo">
		<include refid="selectAttend" />
	</select>	
	
	<!-- 卡片列表方法 某个用户参与的卡片 -->
	<select id="selectAttendBySearchVo" resultMap="BaseResultMap"
		parameterType="com.simi.vo.card.CardSearchVo">
		<include refid="selectAttend" />
	</select>		
	
	<!-- 统计某个时间点有卡片的日期和个数 -->
	<select id="totalByMonth" resultType="java.util.HashMap"
		parameterType="com.simi.vo.card.CardSearchVo">
		select FROM_UNIXTIME(service_time ,'%Y-%m-%d') as service_date , count(distinct card_id) as total
		from
		(
			select <include refid="Base_Column_List" /> from cards 
			where (user_id = #{userId,jdbcType=NUMERIC} or create_user_id = #{userId,jdbcType=NUMERIC} )
			<if test="startTime != null">
				<![CDATA[	and service_time >= ${startTime} ]]>   
			</if>
				
			<if test="endTime != null">
				<![CDATA[	and service_time <= ${endTime} ]]>   
			</if>
			union
			
			select <include refid="Base_Column_List" /> from cards 
			where card_id in (select card_id from card_attend where user_id = #{userId,jdbcType=NUMERIC})
			<if test="startTime != null">
				<![CDATA[	and service_time >= ${startTime} ]]>   
			</if>	
				
			<if test="endTime != null">
				<![CDATA[	and service_time <= ${endTime} ]]>   
			</if>
						
			<if test="userType == 1">
				union
				select <include refid="Base_Column_List" /> from cards 
				where user_id in (select user_id from user_ref_sec where sec_id = #{userId,jdbcType=NUMERIC})
				and set_sec_do = 1
				<if test="startTime != null">
					<![CDATA[	and service_time >= ${startTime} ]]>   
				</if>	
					
				<if test="endTime != null">
					<![CDATA[	and service_time <= ${endTime} ]]>   
				</if>			
			
			</if>	
		) as T
		GROUP BY service_date
		order by service_date asc
	</select>	
	
	
	<!-- 获得即将闹钟提醒的卡片列表 -->
	<select id="selectByReminds" resultMap="BaseResultMap"
		parameterType="com.simi.vo.card.CardSearchVo">
		select <include refid="Base_Column_List" />
		from
		(
			select <include refid="Base_Column_List" /> from cards 
			where (user_id = #{userId,jdbcType=NUMERIC} or create_user_id = #{userId,jdbcType=NUMERIC} )
				<![CDATA[	and service_time > unix_timestamp(now()) ]]>   
				and set_remind > 0 
			union	
			select <include refid="Base_Column_List" /> from cards 
			where card_id in (select card_id from card_attend where user_id = #{userId,jdbcType=NUMERIC})
				<![CDATA[	and service_time > unix_timestamp(now()) ]]>   
				and set_remind > 0 	
			<if test="userType == 1">
				union
				select <include refid="Base_Column_List" /> from cards 
				where user_id in (select user_id from user_ref_sec where sec_id = #{userId,jdbcType=NUMERIC})
				and set_sec_do = 1
				<![CDATA[	and service_time > unix_timestamp(now()) ]]>   			
				and set_remind > 0 
			</if>	
		) as T
		order by service_time asc
	</select>
	
<!-- 获得即将闹钟提醒的卡片列表 -->
	<select id="selectByRemindAll" resultMap="BaseResultMap"
		parameterType="com.simi.vo.card.CardSearchVo">
		select <include refid="Base_Column_List" />
		from cards
		WHERE 1 = 1
		<if test="startTime != null">
			<![CDATA[	and service_time >= ${startTime} ]]>   
		</if>	
			
		<if test="endTime != null">
			<![CDATA[	and service_time <= ${endTime} ]]>   
		</if>
		
		and status in ( 1, 2)
		order by service_time asc
	</select>	
		
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
		delete from cards
		where card_id = #{cardId,jdbcType=NUMERIC}
	</delete>
	<insert id="insert" parameterType="com.simi.po.model.card.Cards">
		<selectKey resultType="java.lang.Long" order="AFTER" keyProperty="cardId">
			SELECT LAST_INSERT_ID() AS card_id
		</selectKey>	
	
		insert into cards (card_id, create_user_id, user_id,
		card_type, title, service_time,
		service_addr, service_content, card_extra, set_remind,
		set_now_send, set_sec_do, set_sec_remarks,
		set_friend_view, status, sec_remarks, add_time, update_time
		)
		values (#{cardId,jdbcType=NUMERIC}, #{createUserId,jdbcType=NUMERIC}, #{userId,jdbcType=NUMERIC},
		#{cardType,jdbcType=NUMERIC}, #{title,jdbcType=VARCHAR}, #{serviceTime,jdbcType=NUMERIC},
		#{serviceAddr,jdbcType=VARCHAR}, #{serviceContent,jdbcType=VARCHAR}, #{cardExtra,jdbcType=VARCHAR},
		#{setRemind,jdbcType=SMALLINT},
		#{setNowSend,jdbcType=NUMERIC}, #{setSecDo,jdbcType=NUMERIC}, #{setSecRemarks,jdbcType=VARCHAR},
		#{setFriendView,jdbcType=NUMERIC},
		#{status,jdbcType=NUMERIC}, #{secRemarks,jdbcType=VARCHAR}, #{addTime,jdbcType=NUMERIC}, #{updateTime,jdbcType=NUMERIC}
		)
	</insert>
	<insert id="insertSelective" parameterType="com.simi.po.model.card.Cards">
		<selectKey resultType="java.lang.Long" order="AFTER" keyProperty="cardId">
			SELECT LAST_INSERT_ID() AS card_id
		</selectKey>

		insert into cards
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="cardId != null">
				card_id,
			</if>
			<if test="createUserId != null">
				create_user_id,
			</if>
			<if test="userId != null">
				user_id,
			</if>
			<if test="cardType != null">
				card_type,
			</if>
			<if test="title != null">
				title,
			</if>
			<if test="serviceTime != null">
				service_time,
			</if>
			<if test="serviceAddr != null">
				service_addr,
			</if>
			<if test="serviceContent != null">
				service_content,
			</if>
			<if test="cardExtra != null">
				card_extra,
			</if>
			<if test="setRemind != null">
				set_remind,
			</if>
			<if test="setNowSend != null">
				set_now_send,
			</if>
			<if test="setSecDo != null">
				set_sec_do,
			</if>
			<if test="setSecRemarks != null">
				set_sec_remarks,
			</if>
			<if test="secRemarks != null">
				sec_remarks,
			</if>
			<if test="setFriendView != null">
				set_friend_view,
			</if>
			<if test="status != null">
				status,
			</if>
			<if test="addTime != null">
				add_time,
			</if>
			<if test="updateTime != null">
				update_time,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="cardId != null">
				#{cardId,jdbcType=NUMERIC},
			</if>
			<if test="createUserId != null">
				#{createUserId,jdbcType=NUMERIC},
			</if>
			<if test="userId != null">
				#{userId,jdbcType=NUMERIC},
			</if>
			<if test="cardType != null">
				#{cardType,jdbcType=NUMERIC},
			</if>
			<if test="title != null">
				#{title,jdbcType=VARCHAR},
			</if>
			<if test="serviceTime != null">
				#{serviceTime,jdbcType=NUMERIC},
			</if>
			<if test="serviceAddr != null">
				#{serviceAddr,jdbcType=VARCHAR},
			</if>
			<if test="serviceContent != null">
				#{serviceContent,jdbcType=VARCHAR},
			</if>
			<if test="cardExtra != null">
				#{cardExtra,jdbcType=VARCHAR},
			</if>
			<if test="setRemind != null">
				#{setRemind,jdbcType=SMALLINT},
			</if>
			<if test="setNowSend != null">
				#{setNowSend,jdbcType=NUMERIC},
			</if>
			<if test="setSecDo != null">
				#{setSecDo,jdbcType=NUMERIC},
			</if>
			<if test="setSecRemarks != null">
				#{setSecRemarks,jdbcType=VARCHAR},
			</if>
			<if test="secRemarks != null">
				#{secRemarks,jdbcType=VARCHAR},
			</if>
			<if test="setFriendView != null">
				#{setFriendView,jdbcType=NUMERIC},
			</if>

			<if test="status != null">
				#{status,jdbcType=NUMERIC},
			</if>
			
			<if test="addTime != null">
				#{addTime,jdbcType=NUMERIC},
			</if>
			<if test="updateTime != null">
				#{updateTime,jdbcType=NUMERIC},
			</if>
		</trim>
	</insert>
	<update id="updateByPrimaryKeySelective" parameterType="com.simi.po.model.card.Cards">
		update cards
		<set>
			<if test="createUserId != null">
				create_user_id = #{createUserId,jdbcType=NUMERIC},
			</if>
			<if test="userId != null">
				user_id = #{userId,jdbcType=NUMERIC},
			</if>
			<if test="cardType != null">
				card_type = #{cardType,jdbcType=NUMERIC},
			</if>
			<if test="title != null">
				title = #{title,jdbcType=VARCHAR},
			</if>
			<if test="serviceTime != null">
				service_time = #{serviceTime,jdbcType=NUMERIC},
			</if>
			<if test="serviceAddr != null">
				service_addr = #{serviceAddr,jdbcType=VARCHAR},
			</if>
			<if test="serviceContent != null">
				service_content = #{serviceContent,jdbcType=VARCHAR},
			</if>
			<if test="cardExtra != null">
				card_extra = #{cardExtra,jdbcType=VARCHAR},
			</if>
			<if test="setRemind != null">
				set_remind = #{setRemind,jdbcType=SMALLINT},
			</if>
			<if test="setNowSend != null">
				set_now_send = #{setNowSend,jdbcType=NUMERIC},
			</if>
			<if test="setSecDo != null">
				set_sec_do = #{setSecDo,jdbcType=NUMERIC},
			</if>
			<if test="setSecRemarks != null">
				set_sec_remarks = #{setSecRemarks,jdbcType=VARCHAR},
			</if>
			<if test="secRemarks != null">
				sec_remarks = #{secRemarks,jdbcType=VARCHAR},
			</if>
			<if test="status != null">
				status = #{status,jdbcType=NUMERIC},
			</if>
			<if test="addTime != null">
				add_time = #{addTime,jdbcType=NUMERIC},
			</if>
			<if test="updateTime != null">
				update_time = #{updateTime,jdbcType=NUMERIC},
			</if>
		</set>
		where card_id = #{cardId,jdbcType=NUMERIC}
	</update>
	<update id="updateByPrimaryKey" parameterType="com.simi.po.model.card.Cards">
		update cards
		set create_user_id = #{createUserId,jdbcType=NUMERIC},
		user_id = #{userId,jdbcType=NUMERIC},
		card_type = #{cardType,jdbcType=NUMERIC},
		title = #{title,jdbcType=VARCHAR},
		service_time = #{serviceTime,jdbcType=NUMERIC},
		service_addr = #{serviceAddr,jdbcType=VARCHAR},
		service_content = #{serviceContent,jdbcType=VARCHAR},
		card_extra = #{cardExtra,jdbcType=VARCHAR},
		set_remind = #{setRemind,jdbcType=SMALLINT},
		set_now_send = #{setNowSend,jdbcType=NUMERIC},
		set_sec_do = #{setSecDo,jdbcType=NUMERIC},
		set_sec_remarks = #{setSecRemarks,jdbcType=VARCHAR},
		sec_remarks = #{setSecRemarks,jdbcType=VARCHAR},
		set_friend_view = #{setFriendView,jdbcType=NUMERIC},
		status = #{status,jdbcType=NUMERIC},
		add_time = #{addTime,jdbcType=NUMERIC},
		update_time = #{updateTime,jdbcType=NUMERIC}
		where card_id = #{cardId,jdbcType=NUMERIC}
	</update>
	
	<update id="updateFinishByOvertime" parameterType="com.simi.po.model.card.Cards">
		update cards
		set status = 3
		where <![CDATA[ service_time < unix_timestamp(now()) ]]>   		
	</update>
</mapper>